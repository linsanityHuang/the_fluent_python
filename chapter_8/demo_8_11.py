'''
Python 唯一支持的参数传递模式是共享传参（call by sharing） 。

多数面向对象语言都采用这一模式，包括 Ruby、Smalltalk 和 Java（Java 的引用类型是这样，基本类型按值传参） 。

共享传参指函数的各个形式参数获得实参中各个引用的副本。也就是说，函数内部的形参是实参的别名。

这种方案的结果是，函数可能会修改作为参数传入的可变对象，但是无法修改那些对象的标识（即不能把一个对象替换成另一个对象） 。

示例 8-11 中有个简单的函数，它在参数上调用 += 运算符。

分别把数字、列表和元组传给那个函数，实际传入的实参会以不同的方式受到影响。

示例 8-11　函数可能会修改接收到的任何可变对象
'''


def f(a, b):
	a += b
	return a


if __name__ == '__main__':
	x = 1
	y = 2
	print(f(x, y))
	'''3'''
	print(x, y)
	'''1 2'''
	
	a = [1, 2]
	b = [3, 4]
	print(f(a, b))
	'''[1, 2, 3, 4]'''
	print(a, b)
	'''[1, 2, 3, 4] [3, 4]'''
	
	t = (10, 20)
	u = (30, 40)
	print(f(t, u))
	'''(10, 20, 30, 40)'''
	print(t, u)
	'''(10, 20) (30, 40)'''
