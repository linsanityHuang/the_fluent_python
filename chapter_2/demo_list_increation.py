# 考虑下面这个简单的表达式：
# >>> a += b 
# 如 果 a 实 现 了 __iadd__ 方 法， 就 会 调 用 这 个 方 法。 
# 同 时 对 可 变 序 列（ 例 如 list、bytearray 和 array.array）来说，a 会就地改动，就像调用了 a.extend(b) 一样。
# 但是如果 a 没有实现 __iadd__ 的话，a += b 这个表达式的效果就变得跟 a = a + b 一样了：
# 首先计算 a + b，得到一个新的对象，然后赋值给 a。
# 也就是说，在这个表达式中，变量名会不会被关联到新的对象，完全取决于这个类型有没有实现 __iadd__ 这个方法。
# 总体来讲，可变序列一般都实现了 __iadd__ 方法，因此 += 是就地加法。
# 而不可变序列根本就不支持这个操作，对这个方法的实现也就无从谈起。
# 上面所说的这些关于 += 的概念也适用于 *=，不同的是，后者相对应的是 __imul__。


# 有个小例子，展示的是 *= 在可变和不可变序列上的作用
l = [1, 2, 3]
print(id(l))
l *= 2
print(id(l))

t = (1, 2, 3)
print(id(t))
t *= 2
print(id(t))